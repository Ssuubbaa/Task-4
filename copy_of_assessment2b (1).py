# -*- coding: utf-8 -*-
"""Copy of Assessment2B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PIf4dbxuux9YoXt6mHpQioWSyHS83l87

###### Assessment

###### I am going to provide two .csv files , you are supposed to work on them and have to provide solutions to the following problems

###### import necessary libraries
"""

import pandas as pd
import matplotlib.pyplot as plt

"""###### merge those two csv files (after getting as dataframes, get them as a single dataframe)"""

d1 = pd.read_csv("/content/college_1.csv")
d2 = pd.read_csv("/content/college_2.csv")
dataFrame = pd.concat([d1,d2])
dataFrame

"""###### Take each csv file , split that csv file into multiple categories (example csv files are added in the repo)

###### consider if the codekata score exceeds 15000 points(present week) then make a csv on those observations as Exceeded expectations.csv
"""

data = dataFrame[(dataFrame['CodeKata Score'] >15000)]
data.to_csv("Exceeded expectations.csv")
cd=pd.read_csv("Exceeded expectations.csv")
cd.head()

"""###### if  10000<codekata score<15000   (Reached_expectations.csv)


"""

dataset = dataFrame[(dataFrame['CodeKata Score'].between(10000,15000))]
dataset.to_csv("Reached_expectations.csv")
cd1 = pd.read_csv("Reached_expectations.csv")
cd1.head()

"""###### if  7000<codekata score<10000   (Needs_Improvement.csv)

"""

dataset1 = dataFrame[(dataFrame['CodeKata Score'].between(7000,10000))]
dataset1.to_csv("Needs_Improvement.csv")
cd2 = pd.read_csv("Needs_Improvement.csv")
cd2

"""###### if  codekate score < 7000        (Unsatisfactory.csv)"""

dataset2 = dataFrame[(dataFrame['CodeKata Score']<7000)]
dataset2.to_csv("Unsatisfactory.csv")
cd3 = pd.read_csv("Unsatisfactory.csv")
cd3

"""###### Average of previous week geekions vs this week geekions (i.e Previous Geekions vs CodeKata Score)"""

average = dataFrame['CodeKata Score'].mean()
average1 = dataFrame['Previous Geekions'].mean()
print("Average of Previous weeek Geekions is:",average)
print("Average of this weeek Geekions is:",average1)

"""###### No of students participated """

dataFrame['Name'].count()

"""###### #Average completion of python course or my_sql or python english or computational thinking"""

dataFrame['python'].agg('mean')

"""###### rising star of the week (top 3 candidate who performed well in that particular week)"""

top3 = dataFrame.sort_values(by=['Rising'],ascending=False)
top3.head(3)

"""###### Shining stars of the week (top 3 candidates who has highest geekions)"""

top3 = dataFrame.sort_values(by=['Previous Geekions'],ascending=False)
top3.head(3)

"""###### Department wise codekata performance (pie chart)



"""

dataset3= dataFrame[['Name','Department','CodeKata Score']]
cse = dataset3[(dataset3['Department']=='Computer Science and Engineering')]
cse1 = cse['Name']
cse2 = cse['Department']
cse3 = cse['CodeKata Score']
EEE = dataset3[(dataset3['Department']=='Electronics and Electrical Engineering')]
EEE1 = EEE['Name']
EEE2 = EEE['Department']
EEE3 = EEE['CodeKata Score']
ECE = dataset3[(dataset3['Department']=='Electronics and Communication Engineering')]
ECE1 = ECE['Name']
ECE2 = ECE['Department']
ECE3 = ECE['CodeKata Score']
plt.figure(0)
plt.title('Computer Science Department')
a=plt.pie(cse3,labels=cse1)
plt.figure(1)
plt.title('Electronics and Electrical Engineering')
b=plt.pie(EEE3,labels=EEE1)
plt.figure(2)
plt.title('Electronics and Communication Engineering')
c=plt.pie(ECE3,labels=ECE1)
plt.show()

"""###### Department wise toppers (horizantal bar graph or any visual representations of your choice)"""

dataFrameECE = dataFrame[(dataFrame['Department']=='Electronics and Communication Engineering')]
dataFrameECE
import matplotlib.pyplot as plt

dataFrameECE.plot.barh(stacked=True)
plt.title( "ECE Dept")
plt.xlabel("performance")
plt.ylabel("Students")

dataFrameEEE = dataFrame[(dataFrame['Department']=='Electronics and Electrical Engineering')]
dataFrameEEE
import matplotlib.pyplot as plt

dataFrameEEE.plot.barh(stacked=True)
plt.title( "EEE Dept")
plt.xlabel("performance")
plt.ylabel("Students")

dataFramecse = dataFrame[(dataFrame['Department']=='Computer Science and Engineering')]
dataFramecse
import matplotlib.pyplot as plt

dataFramecse.plot.barh(stacked=True)
plt.title( "CSE Dept")
plt.xlabel("performance")
plt.ylabel("Students")